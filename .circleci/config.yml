# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.devops
	          source ~/.devops/bin/activate
            make install

            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            source ~/.devops/bin/activate
            make lint 

  build-and-push-docker-image:
    docker:
      - image: cimg/base:2023.05
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: Login docker
          command: |
            echo $DOCKER_TOKEN | docker login -u $DOCKER_USERNAME --password-stdin
      - run:
          name: Build docker image
          command: |
            current_version=$( curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/udahousefx_image_version )
            echo "Current version ${current_version}"
            # Increase by 1
            new_version=$((current_version + 1))
            image_name="udahousefx:R${new_version}"
            echo "$image_name" > imagename.txt

            docker build -t tien4dev/"$image_name" .

            curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/udahousefx_image_version -d "${new_version}"
      - run:
          name: Push docker image
          command: |
            image_name=$( cat imagename.txt )
            echo "Pushing image name: ${image_name}"
            docker push tien4dev/"$image_name"

  deploy-to-eks:
    docker:
      - image: cimg/aws:2023.04
    steps:
      - run:
          name: Install kubectl
          command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
              aws eks --region us-east-1 update-kubeconfig --name udapeople2
              kubectl version
      
      - run:
          name: Deploy new version
          command: |
              latest_version=$( curl https://kvdb.io/7AiAwC67kGTnWWyt6acGGm/udahousefx_image_version )
              echo "Latest version ${latest_version}"
              kubectl set image deployment/udahousefx udahousefx=tien4dev/udahousefx:"R${latest_version}"

workflows:
  udapeople-pipeline:
    jobs:
      # - build-and-push-docker-image
      - build
      # - deploy-to-eks